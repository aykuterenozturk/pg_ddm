diff --git a/.gitignore b/.gitignore
index 784794c..3ee459e 100644
--- a/.gitignore
+++ b/.gitignore
@@ -28,3 +28,7 @@
 *.exe
 *.gz
 *.swp
+
+.project
+.cproject
+.settings
diff --git a/Makefile b/Makefile
index 7a07e11..83b3e41 100644
--- a/Makefile
+++ b/Makefile
@@ -1,9 +1,9 @@
 
 include config.mak
 
-bin_PROGRAMS = pgbouncer
+bin_PROGRAMS = pg_ddm
 
-pgbouncer_SOURCES = \
+pg_ddm_SOURCES = \
 	src/admin.c \
 	src/client.c \
 	src/dnslookup.c \
@@ -16,6 +16,8 @@ pgbouncer_SOURCES = \
 	src/pktbuf.c \
 	src/pooler.c \
 	src/proto.c \
+	src/rewrite_query.c \
+    src/rubycall.c \
 	src/sbuf.c \
 	src/scram.c \
 	src/server.c \
@@ -42,6 +44,8 @@ pgbouncer_SOURCES = \
 	include/pktbuf.h \
 	include/pooler.h \
 	include/proto.h \
+	include/rewrite_query.h \
+    include/rubycall.h \
 	include/sbuf.h \
 	include/scram.h \
 	include/server.h \
@@ -58,19 +62,21 @@ pgbouncer_SOURCES = \
 	include/common/unicode_norm.h \
 	include/common/unicode_norm_table.h
 
-pgbouncer_CPPFLAGS = -Iinclude $(CARES_CFLAGS) $(LIBEVENT_CFLAGS) $(TLS_CPPFLAGS)
+#pgbouncer_CPPFLAGS = -Iinclude $(CARES_CFLAGS) $(LIBEVENT_CFLAGS) $(TLS_CPPFLAGS)
+ruby_CPPFLAGS = $(shell pkg-config --cflags ruby)
+pg_ddm_CPPFLAGS = -Iinclude $(CARES_CFLAGS) $(LIBEVENT_CFLAGS) $(TLS_CPPFLAGS) $(ruby_CPPFLAGS)
 
 # include libusual sources directly
 AM_FEATURES = libusual
-pgbouncer_EMBED_LIBUSUAL = 1
+pg_ddm_EMBED_LIBUSUAL = 1
 
 # docs to install as-is
-dist_doc_DATA = README.md NEWS.md etc/pgbouncer.ini etc/userlist.txt
+dist_doc_DATA = README.md NEWS.md etc/pg_ddm.ini etc/userlist.txt
 
 DISTCLEANFILES = config.mak config.status lib/usual/config.h config.log
 
 DIST_SUBDIRS = doc test
-dist_man_MANS = doc/pgbouncer.1 doc/pgbouncer.5
+dist_man_MANS = doc/pg_ddm.1 doc/pg_ddm.5
 
 # files in tgz
 EXTRA_DIST = AUTHORS COPYRIGHT Makefile config.mak.in config.sub config.guess \
@@ -94,19 +100,20 @@ LIBUSUAL_DIST = $(filter-out %/config.h, $(sort $(wildcard \
 		lib/README lib/COPYRIGHT \
 		lib/find_modules.sh )))
 
-pgbouncer_LDFLAGS := $(TLS_LDFLAGS)
-pgbouncer_LDADD := $(CARES_LIBS) $(LIBEVENT_LIBS) $(TLS_LIBS) $(LIBS)
+ruby_LDFLAGS := $(shell pkg-config --libs ruby)
+pg_ddm_LDFLAGS := $(TLS_LDFLAGS)
+pg_ddm_LDADD := $(CARES_LIBS) $(LIBEVENT_LIBS) $(TLS_LIBS) $(LIBS) $(ruby_LDFLAGS)
 LIBS :=
 
 #
 # win32
 #
 
-EXTRA_pgbouncer_SOURCES = win32/win32support.c win32/win32support.h
+EXTRA_pg_ddm_SOURCES = win32/win32support.c win32/win32support.h
 EXTRA_PROGRAMS = pgbevent
 ifeq ($(PORTNAME),win32)
-pgbouncer_CPPFLAGS += -Iwin32
-pgbouncer_SOURCES += $(EXTRA_pgbouncer_SOURCES)
+pg_ddm_CPPFLAGS += -Iwin32
+pg_ddm_SOURCES += $(EXTRA_pg_ddm_SOURCES)
 bin_PROGRAMS += pgbevent
 endif
 
@@ -146,7 +153,7 @@ debian/changelog: NEWS.md
 	echo >>$@
 	echo '  * v$(PACKAGE_VERSION)' >>$@
 	echo >>$@
-	printf ' -- PgBouncer developers <noreply@localhost>  ' >>$@
+	printf ' -- pg_ddm developers <noreply@localhost>  ' >>$@
 	date -u -R -d `sed -E -n '/^\*\*/ { s/^.*([0-9]{4}-[0-9]{2}-[0-9]{2}).*/\1/;p;q }' $<` >>$@
 
 w32arch = i686-w64-mingw32
@@ -160,17 +167,17 @@ zip: configure clean
 			--without-cares \
 			--enable-evdns \
 		&& make \
-		&& $(w32arch)-strip pgbouncer.exe pgbevent.dll \
-		&& zip pgbouncer.zip pgbouncer.exe pgbevent.dll doc/*.html
-	zip -l buildexe/pgbouncer.zip etc/pgbouncer.ini etc/userlist.txt
-	mv buildexe/pgbouncer.zip $(w32zip)
+		&& $(w32arch)-strip pg_ddm.exe pgbevent.dll \
+		&& zip pg_ddm.zip pg_ddm.exe pgbevent.dll doc/*.html
+	zip -l buildexe/pg_ddm.zip etc/pg_ddm.ini etc/userlist.txt
+	mv buildexe/pg_ddm.zip $(w32zip)
 
 zip-up: $(w32zip)
-	rsync $(w32zip) pgf:web/pgbouncer/htdocs/win32/
+	rsync $(w32zip) pgf:web/pg_ddm/htdocs/win32/
 
 tgz = $(PACKAGE_TARNAME)-$(PACKAGE_VERSION).tar.gz
 tgz-up: $(tgz)
-	rsync $(tgz) pgf:web/pgbouncer/htdocs/testing/
+	rsync $(tgz) pgf:web/pg_ddm/htdocs/testing/
 
 .PHONY: tags
 tags:
@@ -181,5 +188,5 @@ htmls:
 		mkdir -p html && $(PANDOC) $$f -o html/`basename $$f`.html; \
 	done
 
-doc/pgbouncer.1 doc/pgbouncer.5:
+doc/pg_ddm.1 doc/pg_ddm.5:
 	$(MAKE) -C doc
diff --git a/configure.ac b/configure.ac
index 10a8466..cc3a743 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1,6 +1,6 @@
 dnl Process this file with autoconf to produce a configure script.
 
-AC_INIT([PgBouncer],
+AC_INIT([Pg_Ddm],
         [1.12.0],
         [https://github.com/pgbouncer/pgbouncer/issues], [],
         [https://www.pgbouncer.org/])
diff --git a/doc/Makefile b/doc/Makefile
index 049f636..ab9ff63 100644
--- a/doc/Makefile
+++ b/doc/Makefile
@@ -1,6 +1,6 @@
 -include ../config.mak
 
-manpages = pgbouncer.1 pgbouncer.5
+manpages = pg_ddm.1 pg_ddm.5
 
 dist_man_MANS = $(manpages)
 
@@ -8,7 +8,7 @@ EXTRA_DIST = config.md usage.md Makefile $(manpages) \
 	     frag-config-man.md frag-usage-man.md \
 	     filter.py
 
-CLEANFILES = pgbouncer_1.md pgbouncer_5.md
+CLEANFILES = pg_ddm_1.md pg_ddm_5.md
 
 # make maintainer-clean removes those
 MAINTAINERCLEANFILES = $(manpages)
@@ -19,16 +19,16 @@ include $(abs_top_srcdir)/lib/mk/antimake.mk
 
 export PACKAGE_VERSION
 
-pgbouncer.%: pgbouncer_%.md
+pg_ddm.%: pg_ddm_%.md
 	$(PANDOC) -s -t man -o $@ $<
 
-pgbouncer_1.md: filter.py frag-usage-man.md usage.md
+pg_ddm_1.md: filter.py frag-usage-man.md usage.md
 	$(PYTHON) $^ >$@
 
-pgbouncer_5.md: filter.py frag-config-man.md config.md
+pg_ddm_5.md: filter.py frag-config-man.md config.md
 	$(PYTHON) $^ >$@
 
-.INTERMEDIATE: pgbouncer_1.md pgbouncer_5.md
+.INTERMEDIATE: pg_ddm_1.md pg_ddm_5.md
 
 web:
-	make -C ../../pgbouncer.github.io
+	make -C ../../pg_ddm.github.io
diff --git a/include/bouncer.h b/include/bouncer.h
index 45795e0..61ac673 100644
--- a/include/bouncer.h
+++ b/include/bouncer.h
@@ -87,6 +87,8 @@ typedef struct ScramState ScramState;
 
 extern int cf_sbuf_len;
 
+#include "rubycall.h"
+#include "rewrite_query.h"
 #include "util.h"
 #include "iobuf.h"
 #include "sbuf.h"
@@ -332,6 +334,10 @@ struct PgDatabase {
 	int connection_count;	/* total connections for this database in all pools */
 
 	struct AATree user_tree;	/* users that have been queried on this database */
+
+	char *role;
+	char *root;
+	int route;
 };
 
 
@@ -516,6 +522,15 @@ extern char *cf_server_tls_ca_file;
 extern char *cf_server_tls_cert_file;
 extern char *cf_server_tls_key_file;
 extern char *cf_server_tls_ciphers;
+extern char *cf_etcd_host;
+extern char *cf_etcd_port;
+extern char *cf_etcd_user;
+extern char *cf_etcd_passwd;
+extern char *cf_user_regex;
+extern char *cf_tag_regex;
+extern int cf_pg_ddm_enabled;
+extern int cf_pg_ddm_ini_route;
+extern int cf_pg_ddm_rewrite_route;
 
 extern const struct CfLookup pool_mode_map[];
 
diff --git a/include/objects.h b/include/objects.h
index afb7ae9..fa185c7 100644
--- a/include/objects.h
+++ b/include/objects.h
@@ -30,6 +30,7 @@ extern struct Slab *user_cache;
 extern struct Slab *iobuf_cache;
 
 PgDatabase *find_database(const char *name);
+PgDatabase *find_routing_database(const char *name, const char *type, int server_number);
 PgUser *find_user(const char *name);
 PgPool *get_pool(PgDatabase *, PgUser *);
 PgSocket *compare_connections_by_time(PgSocket *lhs, PgSocket *rhs);
diff --git a/src/client.c b/src/client.c
index acaa9a1..c35f7b8 100644
--- a/src/client.c
+++ b/src/client.c
@@ -58,6 +58,7 @@ static bool check_client_passwd(PgSocket *client, const char *passwd)
 		default:
 			return false;
 		}
+		break;
 	case AUTH_MD5:
 		if (strlen(passwd) != MD5_PASSWD_LEN)
 			return false;
@@ -479,10 +480,12 @@ static bool decide_startup_pool(PgSocket *client, PktHdr *pkt)
 		} else if (strcmp(key, "application_name") == 0) {
 			set_appname(client, val);
 			appname_found = true;
-		} else if (varcache_set(&client->vars, key, val)) {
-			slog_debug(client, "got var: %s=%s", key, val);
+		/*} else if (varcache_set(&client->vars, key, val)) {
+			slog_debug(client, "got var: %s=%s", key, val);*/
 		} else if (strlist_contains(cf_ignore_startup_params, key)) {
 			slog_debug(client, "ignoring startup parameter: %s=%s", key, val);
+		} else if (varcache_set(&client->vars, key, val)) {
+			slog_debug(client, "got var: %s=%s", key, val);
 		} else {
 			slog_warning(client, "unsupported startup parameter: %s=%s", key, val);
 			disconnect_client(client, true, "unsupported startup parameter: %s", key);
@@ -860,6 +863,12 @@ static bool handle_client_work(PgSocket *client, PktHdr *pkt)
 	if (client->pool->db->admin)
 		return admin_handle_client(client, pkt);
 
+	if (pkt->type == 'Q' || pkt->type == 'P') {
+		 if (!rewrite_query(client, pkt)) {
+			return false;
+		}
+	}
+
 	/* acquire server */
 	if (!find_server(client))
 		return false;
diff --git a/src/loader.c b/src/loader.c
index 016ce9f..131e730 100644
--- a/src/loader.c
+++ b/src/loader.c
@@ -199,6 +199,9 @@ bool parse_database(void *base, const char *name, const char *connstr)
 	char *timezone = NULL;
 	char *connect_query = NULL;
 	char *appname = NULL;
+	char *root = NULL;
+	char *role = "master";
+	int route = 0;
 
 	int v_port;
 
@@ -226,6 +229,12 @@ bool parse_database(void *base, const char *name, const char *connstr)
 
 		if (strcmp("dbname", key) == 0) {
 			dbname = val;
+		} else if (strcmp("root", key) == 0) {
+			root = val;
+		} else if (strcmp("role", key) == 0) {
+			role = val;
+		} else if (strcmp("route", key) == 0) {
+			route = atoi(val);
 		} else if (strcmp("host", key) == 0) {
 			host = val;
 		} else if (strcmp("port", key) == 0) {
@@ -288,6 +297,16 @@ bool parse_database(void *base, const char *name, const char *connstr)
 		}
 	}
 
+	if(root){
+		db->root = strdup(root);
+	}
+
+	if(role){
+		db->role = strdup(role);
+	}
+
+	db->route = route;
+
 	/* tag the db as alive */
 	db->db_dead = 0;
 	/* assuming not an autodb */
diff --git a/src/main.c b/src/main.c
index e7e63d6..207e6be 100644
--- a/src/main.c
+++ b/src/main.c
@@ -165,6 +165,15 @@ char *cf_server_tls_ca_file;
 char *cf_server_tls_cert_file;
 char *cf_server_tls_key_file;
 char *cf_server_tls_ciphers;
+char *cf_etcd_host;
+char *cf_etcd_port;
+char *cf_etcd_user;
+char *cf_etcd_passwd;
+char *cf_user_regex;
+char *cf_tag_regex;
+int cf_pg_ddm_enabled;
+int cf_pg_ddm_ini_route;
+int cf_pg_ddm_rewrite_route;
 
 /*
  * config file description
@@ -301,6 +310,16 @@ CF_ABS("server_tls_key_file", CF_STR, cf_server_tls_key_file, CF_NO_RELOAD, ""),
 CF_ABS("server_tls_protocols", CF_STR, cf_server_tls_protocols, CF_NO_RELOAD, "secure"),
 CF_ABS("server_tls_ciphers", CF_STR, cf_server_tls_ciphers, CF_NO_RELOAD, "fast"),
 
+CF_ABS("etcd_host", CF_STR, cf_etcd_host, CF_NO_RELOAD, ""),
+CF_ABS("etcd_port", CF_STR, cf_etcd_port, CF_NO_RELOAD, ""),
+CF_ABS("etcd_user", CF_STR, cf_etcd_user, CF_NO_RELOAD, ""),
+CF_ABS("etcd_passwd", CF_STR, cf_etcd_passwd, CF_NO_RELOAD, ""),
+CF_ABS("user_regex", CF_STR, cf_user_regex, CF_NO_RELOAD, ""),
+CF_ABS("tag_regex", CF_STR, cf_tag_regex, CF_NO_RELOAD, ""),
+CF_ABS("pg_ddm_enabled", CF_INT, cf_pg_ddm_enabled, CF_NO_RELOAD, "1"),
+CF_ABS("pg_ddm_ini_route", CF_INT, cf_pg_ddm_ini_route, CF_NO_RELOAD, "0"),
+CF_ABS("pg_ddm_rewrite_route", CF_INT, cf_pg_ddm_rewrite_route, CF_NO_RELOAD, "0"),
+
 {NULL}
 };
 
@@ -815,6 +834,13 @@ static void cleanup(void)
 	xfree(&cf_server_tls_key_file);
 	xfree(&cf_server_tls_ciphers);
 
+    xfree(&cf_etcd_host);
+    xfree(&cf_etcd_port);
+    xfree(&cf_etcd_user);
+    xfree(&cf_etcd_passwd);
+    xfree(&cf_user_regex);
+    xfree(&cf_tag_regex);
+
 	xfree((char **)&cf_logfile);
 	xfree((char **)&cf_syslog_ident);
 	xfree((char **)&cf_syslog_facility);
diff --git a/src/objects.c b/src/objects.c
index 4878fa1..376ffd6 100644
--- a/src/objects.c
+++ b/src/objects.c
@@ -487,6 +487,29 @@ PgDatabase *find_database(const char *name)
 	return NULL;
 }
 
+/* select routing database */
+PgDatabase *find_routing_database(const char *name, const char *type, int server_number)
+{
+	struct List *item;
+	int count = 1;
+	int number = 0;
+	PgDatabase *db;
+	statlist_for_each(item, &database_list) {
+		db = container_of(item, PgDatabase, head);
+		if (db->root != NULL && strcmp(db->root, name) == 0 && strcmp(db->role, type) == 0) {
+			if (server_number > 0 && count == server_number) {
+				log_debug("Selected Database: %s", db->name);
+				return db;
+			}
+			count = count + 1;
+		}
+	}
+	number = rand();
+	if(count > 1)
+		return find_routing_database(name, type, number % count);
+	return NULL;
+}
+
 /* find existing user */
 PgUser *find_user(const char *name)
 {
